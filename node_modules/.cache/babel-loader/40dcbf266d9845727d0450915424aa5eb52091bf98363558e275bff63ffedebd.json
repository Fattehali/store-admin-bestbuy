{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst aiServiceUrl = '/ai/';\nconst productServiceUrl = '/product/';\nexport default {\n  name: 'ProductForm',\n  props: ['products'],\n  emits: ['addProductsToList', 'updateProductInList'],\n  data() {\n    return {\n      product: {\n        id: 0,\n        name: '',\n        image: '/placeholder.png',\n        description: '',\n        price: 0.00,\n        tags: []\n      },\n      aiCapabilities: [],\n      showValidationErrors: false,\n      isLoadingImage: false,\n      overlayText: ''\n    };\n  },\n  mounted() {\n    // if we're editing a product, get the product details\n    if (this.$route.params.id) {\n      // get the product from the products list\n      const product = this.products.find(product => product.id == this.$route.params.id);\n      // copy the product details into the product object\n      this.product = Object.assign({}, product);\n      // add empty tags if the product doesn't have any\n      if (!this.product.tags) {\n        this.product.tags = [];\n      }\n    }\n    fetch(`${aiServiceUrl}health`).then(response => response.json()).then(data => {\n      if (data.status === 'ok') {\n        console.log('ai service health is ok');\n        this.aiCapabilities = data.capabilities;\n      } else {\n        console.log('ai service health is not ok');\n      }\n    }).catch(error => {\n      console.log('error occured when evaluating ai service health');\n      console.log(error);\n    });\n  },\n  computed: {\n    validationErrors() {\n      let errors = [];\n      if (this.product.name.length === 0) {\n        errors.push('Please enter a value for the name field');\n      }\n      if (this.product.description.length === 0) {\n        errors.push('Please enter a value for the description field');\n      }\n      if (this.product.price <= 0) {\n        errors.push('Please enter a value greater than 0 for the price field');\n      }\n      return errors;\n    }\n  },\n  methods: {\n    generateDescription() {\n      // ensure the tag has a value\n      if (this.product.tags.length === 0) {\n        alert('Please enter a value for the keywords field');\n        return;\n      }\n      const intervalId = this.waitForAI();\n      let requestBody = {\n        name: this.product.name,\n        tags: this.product.tags.split(',').map(tag => tag.trim())\n      };\n      console.log(requestBody);\n      this.product.description = \"\";\n      fetch(`${aiServiceUrl}generate/description`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      }).then(response => response.json()).then(product => {\n        this.product.description = product.description;\n      }).catch(error => {\n        console.log(error);\n        alert('Error occurred while generating product description');\n      }).finally(() => {\n        clearInterval(intervalId);\n      });\n    },\n    generateImage() {\n      // ensure the tag has a value\n      if (this.product.description === \"\") {\n        alert('Please enter a product description');\n        return;\n      }\n      this.isLoadingImage = true;\n      this.overlayText = 'Drawing...';\n      let requestBody = {\n        name: this.product.name,\n        description: this.product.description\n      };\n      console.log(requestBody);\n      fetch(`${aiServiceUrl}generate/image`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      }).then(response => {\n        return response.json();\n      }).then(product => {\n        this.overlayText = 'Downloading...';\n        this.product.image = '';\n        this.product.image = product.image;\n      }).catch(error => {\n        console.log(error);\n        alert('Error occurred while generating product image');\n      }).finally(() => {\n        this.isLoadingImage = false;\n      });\n    },\n    waitForAI() {\n      let dots = '';\n      const intervalId = setInterval(() => {\n        dots += '.';\n        this.product.description = `Thinking${dots}`;\n      }, 500);\n      return intervalId;\n    },\n    saveProduct() {\n      if (this.validationErrors.length > 0) {\n        this.showValidationErrors = true;\n        return;\n      }\n\n      // default to updates\n      let method = 'PUT';\n\n      // get the path of the current request\n      let path = this.$route.path;\n      if (path.includes('add')) {\n        method = 'POST';\n      }\n\n      // ensure product.price is not wrapped in quotes\n      this.product.price = parseFloat(this.product.price);\n\n      // upsert the product\n      fetch(`${productServiceUrl}`, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.product)\n      }).then(response => response.json()).then(product => {\n        alert('Product saved successfully');\n        // update or add the product to the list\n        if (method === 'PUT') {\n          this.$emit('updateProductInList', this.product);\n        } else {\n          this.$emit('addProductsToList', product);\n        }\n        // route to product detail\n        this.$router.push(`/product/${product.id}`);\n      }).catch(error => {\n        console.log(error);\n        alert('Error occurred while saving product');\n      });\n    }\n  }\n};","map":{"version":3,"names":["aiServiceUrl","productServiceUrl","name","props","emits","data","product","id","image","description","price","tags","aiCapabilities","showValidationErrors","isLoadingImage","overlayText","mounted","$route","params","products","find","Object","assign","fetch","then","response","json","status","console","log","capabilities","catch","error","computed","validationErrors","errors","length","push","methods","generateDescription","alert","intervalId","waitForAI","requestBody","split","map","tag","trim","method","headers","body","JSON","stringify","finally","clearInterval","generateImage","dots","setInterval","saveProduct","path","includes","parseFloat","$emit","$router"],"sources":["/Users/fattehali/Desktop/BestBuy/store-admin-L8/src/components/ProductForm.vue"],"sourcesContent":["<template>\n  <div class=\"action-button\">\n    <button @click=\"saveProduct\" class=\"button\">Save Product</button>\n  </div>\n  <br/>\n  <div v-if=\"showValidationErrors\" class=\"error\">\n    <br/>\n    <ul v-for=\"error in validationErrors\" :key=\"error\">\n      <li>{{ error }}</li>\n    </ul>\n  </div>\n  <div class=\"product-form\">\n    <table>\n      <tr>\n        <td><label for=\"product-name\">Name</label></td>\n        <td><input id=\"product-name\" placeholder=\"Product Name\" v-model=\"product.name\" /></td>\n        <td></td>\n      </tr>\n\n      <tr>\n        <td><label for=\"product-price\">Price</label></td>\n        <td><input id=\"product-price\" placeholder=\"Product Price\" v-model=\"product.price\" type=\"number\" step=\"0.01\" /></td>\n        <td></td>\n      </tr>\n\n      <tr>\n        <td><label for=\"product-tags\">Keywords</label></td>\n        <td><input id=\"product-tags\" placeholder=\"Product Keywords\" v-model=\"product.tags\" /></td>\n        <td></td>\n      </tr>\n\n      <tr>\n        <td><label for=\"product-description\">Description</label></td>\n        <td>\n          <textarea rows=\"8\" id=\"product-description\" placeholder=\"Product Description\" v-model=\"product.description\" />\n          <input type=\"hidden\" id=\"product-id\" placeholder=\"Product ID\" v-model=\"product.id\" />\n        </td>\n        <td>\n          <button @click=\"generateDescription\" class=\"ai-button\" v-show=\"aiCapabilities.includes('description')\">Ask AI Assistant</button>\n        </td>\n      </tr>\n\n      <tr>\n        <td><label for=\"product-image\">Image</label></td>\n        <td>\n          <input id=\"product-image-text\" placeholder=\"Product Image\" v-model=\"product.image\" v-show=\"!aiCapabilities.includes('image')\"/>\n          <div id=\"product-image-container\" class=\"image-container\" :class=\"{ loading: isLoadingImage }\" style=\"display: flex; align-items: center;\" v-show=\"aiCapabilities.includes('image')\">\n            <img v-if=\"product.image\" :src=\"product.image\" alt=\"Product Image\" />\n            <div class=\"overlay\">{{ overlayText }}</div>\n          </div>\n        </td>\n        <td>\n          <button id=\"product-image-btn\" @click=\"generateImage\" class=\"ai-button\" v-show=\"aiCapabilities.includes('image')\">Generate Image</button>\n        </td>\n      </tr>\n    </table>\n  </div>\n</template>\n\n<script>\n  const aiServiceUrl = '/ai/';\n  const productServiceUrl = '/product/';\n  \n  export default {\n    name: 'ProductForm',\n    props: ['products'],\n    emits: ['addProductsToList','updateProductInList'],\n    data() {\n      return {\n        product: {\n          id: 0,\n          name: '',\n          image: '/placeholder.png',\n          description: '',\n          price: 0.00,\n          tags: []\n        },\n        aiCapabilities: [],\n        showValidationErrors: false,\n        isLoadingImage: false,\n        overlayText: ''\n      }\n    },\n    mounted() {\n      // if we're editing a product, get the product details\n      if (this.$route.params.id) {\n        // get the product from the products list\n        const product = this.products.find(product => product.id == this.$route.params.id)\n        // copy the product details into the product object\n        this.product = Object.assign({}, product);\n        // add empty tags if the product doesn't have any\n        if (!this.product.tags) {\n          this.product.tags = [];\n        }\n      }\n\n      fetch(`${aiServiceUrl}health`)\n        .then(response => response.json())\n        .then(data => {\n          if (data.status === 'ok') {\n            console.log('ai service health is ok');\n            this.aiCapabilities = data.capabilities;\n          } else {\n            console.log('ai service health is not ok');\n          }\n        })\n        .catch(error => {\n          console.log('error occured when evaluating ai service health');\n          console.log(error)\n        })\n    },\n    computed: {\n      validationErrors() {\n        let errors = [];\n        if (this.product.name.length === 0) {\n          errors.push('Please enter a value for the name field');\n        }\n\n        if (this.product.description.length === 0) {\n          errors.push('Please enter a value for the description field');\n        }\n\n        if (this.product.price <= 0) {\n          errors.push('Please enter a value greater than 0 for the price field');\n        }\n\n        return errors;\n      }\n    },\n    methods: {\n      generateDescription() {\n        // ensure the tag has a value\n        if (this.product.tags.length === 0) {\n          alert('Please enter a value for the keywords field')\n          return;\n        }\n\n        const intervalId = this.waitForAI();\n\n        let requestBody = {\n          name: this.product.name,\n          tags: this.product.tags.split(',').map(tag => tag.trim())\n        }\n\n        console.log(requestBody);\n        this.product.description = \"\";\n\n        fetch(`${aiServiceUrl}generate/description`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        })\n          .then(response => response.json())\n          .then(product => {\n            this.product.description = product.description\n          })\n          .catch(error => {\n            console.log(error)\n            alert('Error occurred while generating product description')\n          })\n          .finally(() => {\n            clearInterval(intervalId);\n          })\n      },\n      generateImage() {\n        // ensure the tag has a value\n        if (this.product.description === \"\") {\n          alert('Please enter a product description')\n          return;\n        }\n\n        this.isLoadingImage = true;\n        this.overlayText = 'Drawing...';\n\n        let requestBody = {\n          name: this.product.name,\n          description: this.product.description\n        }\n\n        console.log(requestBody);\n\n        fetch(`${aiServiceUrl}generate/image`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        })\n          .then(response => {\n            return response.json();\n          })\n          .then(product => {\n            this.overlayText = 'Downloading...';\n            this.product.image = '';\n            this.product.image = product.image\n          })\n          .catch(error => {\n            console.log(error)\n            alert('Error occurred while generating product image')\n          })\n          .finally(() => {\n            this.isLoadingImage = false;\n          })\n      },\n      waitForAI() {\n        let dots = '';\n        const intervalId = setInterval(() => {\n          dots += '.';\n          this.product.description = `Thinking${dots}`;\n        }, 500);\n        return intervalId;\n      },\n      saveProduct() {\n        if (this.validationErrors.length > 0) {\n          this.showValidationErrors = true;\n          return;\n        }\n\n        // default to updates\n        let method = 'PUT';\n\n        // get the path of the current request\n        let path = this.$route.path;\n        if (path.includes('add')) {\n          method = 'POST';\n        }\n\n        // ensure product.price is not wrapped in quotes\n        this.product.price = parseFloat(this.product.price);\n\n        // upsert the product\n        fetch(`${productServiceUrl}`, {\n          method: method,\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.product)\n        })\n          .then(response => response.json())\n          .then(product => {\n            alert('Product saved successfully')            \n            // update or add the product to the list\n            if (method === 'PUT') {\n              this.$emit('updateProductInList', this.product);\n            } else {\n              this.$emit('addProductsToList', product);\n            }\n            // route to product detail\n            this.$router.push(`/product/${product.id}`);\n          })\n          .catch(error => {\n            console.log(error)\n            alert('Error occurred while saving product')\n          })\n      }\n    }\n  }\n</script>\n\n<style scoped>\nul {\n  justify-content: center;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  color: #ff0000;\n}\n\nimg {\n  width: 100%;\n}\n\ntable {\n  border-collapse: collapse;\n}\n\ntd {\n  vertical-align: center;\n  border: none;\n}\n\n.product-form {\n  display: flex;\n  justify-content: center;\n}\n\n.product-form input {\n  padding: 5px;\n  margin: 5px;\n}\n\n.ai-button {\n  height: 60px;\n}\n\n.image-container {\n  position: relative;\n  width: 102%;\n}\n\n.overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n  font-size: x-large;\n  font-weight: bolder;\n}\n\n.image-container.loading .overlay {\n  opacity: 1;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}